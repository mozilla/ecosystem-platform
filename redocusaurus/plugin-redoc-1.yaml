basePath: /
info:
  title: Firefox Accounts Customs Server API Documentation
  version: 0.0.1
  description: >-
    # Overview


    ## Request Format

    None of the requests are authenticated. The customs server is an internal
    service that is running on the same machine as the service that uses it
    (currently only the auth server) and is listening on localhost.


    ## Response Format

    All successful requests will produce a response with HTTP status code of
    "200" and content-type of "application/json". The structure of the response
    body will depend on the endpoint in question.


    Failures due to invalid behavior from the client will produce a response
    with HTTP status code of "400" and content-type of "application/json".
    Failures due to an unexpected situation on the server will produce a
    response with HTTP status code of "500" and content-type of
    "application/json".


    ## API Endpoints

    - [GET /allowedEmailDomains](#operation/getAllowedemaildomains)

    - [GET /allowedIps](#operation/getAllowedips)

    - [GET /allowedPhoneNumbers](#operation/getAllowedphonenumbers)

    - [GET /limits](#operation/getLimits)

    - [GET /](#operation/get)

    - [POST /blockEmail](#operation/postBlockemail)

    - [POST /blockIp](#operation/postBlockip)

    - [POST /check](#operation/postCheck)

    - [POST /checkAuthenticated](#operation/postCheckauthenticated)

    - [POST /checkIpOnly](#operation/postCheckiponly)

    - [POST /failedLoginAttempt](#operation/postFailedloginattempt)

    - [POST /passwordReset](#operation/postPasswordreset)
schemes:
  - https
swagger: '2.0'
host: accounts-api-documentation.stage.mozaws.net
tags: []
paths:
  /allowedEmailDomains:
    get:
      summary: /allowedEmailDomains
      operationId: getAllowedemaildomains
      responses:
        default:
          schema:
            type: string
          description: Successful
  /allowedIPs:
    get:
      summary: /allowedIps
      operationId: getAllowedips
      responses:
        default:
          schema:
            type: string
          description: Successful
  /allowedPhoneNumbers:
    get:
      summary: /allowedPhoneNumbers
      operationId: getAllowedphonenumbers
      responses:
        default:
          schema:
            type: string
          description: Successful
  /limits:
    get:
      summary: /limits
      operationId: getLimits
      responses:
        default:
          schema:
            type: string
          description: Successful
  /:
    get:
      summary: /
      operationId: get
      responses:
        default:
          schema:
            type: string
          description: Successful
  /blockEmail:
    post:
      summary: /blockEmail
      operationId: postBlockemail
      description: >-
        *Not currently used by anyone.*


        Used by internal services to temporarily ban requests associated with a
        given email address. These bans last for
        `config.limits.blockIntervalSeconds` (default: 24 hours).


        REQUEST BODY SCHEMA: `application/json`

        - `email`: the email address associated with the account to ban
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with an empty
            JSON object as the body: {}
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: email is required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/blockEmail" \
            -d '{
              "email": "me@example.com"
            }'
  /blockIp:
    post:
      summary: /blockIp
      operationId: postBlockip
      description: >-
        *Not currently used by anyone.*


        Used by internal services to temporarily ban requests associated with a
        given IP address. These bans last for
        `config.limits.blockIntervalSeconds` (default: 24 hours).


        REQUEST BODY SCHEMA: `application/json`

        - `ip`: the IP address to ban
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with an empty
            JSON object as the body: {}
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: ip is required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/blockIp" \
            -d '{
              "ip": "192.0.2.1"
            }'
  /check:
    post:
      summary: /check
      operationId: postCheck
      description: >-
        Called by the auth server before performing an action on its end to
        check whether or not the action should be blocked. The endpoint is
        capable of rate-limiting and blocking requests that involve a variety of
        [actions](https://github.com/mozilla/fxa/blob/main/packages/fxa-customs-server/lib/actions.js).


        REQUEST BODY SCHEMA: `application/json`

        - `email`: the email address associated with the account

        - `ip`: the IP address where the request originates

        - `action`: the name of the action under consideration

        - `headers`: the forwarded headers of the original request

        - `payload`: the payload of the original request

        - `phoneNumber`: optional phone number of request
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with the
            blocking advice in the JSON body:


            ``` js
                {
                  "block": true,
                  "retryAfter": 86396
                }
            ```


            - `block` indicates whether or not the action should be blocked and
            `retyAfter` tells the client how long it should wait (in seconds)
            before attempting this action again.
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: email, ip and action are all required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/check" \
            -d '{
              "email": "me@example.com",
              "ip": "192.0.2.1",
              "action": "accountCreate"
            }'
  /checkAuthenticated:
    post:
      summary: /checkAuthenticated
      operationId: postCheckauthenticated
      description: >-
        Called by the auth server before performing an authenticated action to
        check whether or not the action should be blocked.


        REQUEST BODY SCHEMA: `application/json`

        - `action`: the name of the action under consideration

        - `ip`: the IP address where the request originates

        - `uid`: account identifier
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with the
            blocking advice in the JSON body:


            ``` js
                {
                  "block": true,
                  "retryAfter": 86396
                }
            ```


            - `block` indicates whether or not the action should be blocked and
            `retryAfter` tells the client how long it should wait (in seconds)
            before attempting this action again.
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: action, ip and uid are all required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/checkAuthenticated" \
            -d '{
              "action": "devicesNotify",
              "ip": "192.0.2.1",
              "uid": "0b65dd742b5a415487f2108cca597044",
            }'
  /checkIpOnly:
    post:
      summary: /checkIpOnly
      operationId: postCheckiponly
      description: >-
        Like [/check](#operation/postCheck), called by the auth server before
        performing an action on its end to check whether or not the action
        should be blocked based only on the request IP.


        REQUEST BODY SCHEMA: `application/json`

        - `email`: (optional) the email address associated with the account

        - `ip`: the IP address where the request originates

        - `action`: the name of the action under consideration
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with the
            blocking advice in the JSON body:


            ``` js
                {
                  "block": true,
                  "retryAfter": 86396
                }
            ```


            - `block` indicates whether or not the action should be blocked and
            `retyAfter` tells the client how long it should wait (in seconds)
            before attempting this action again.
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: ip and action are both required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/checkIpOnly" \
            -d '{
              "ip": "192.0.2.1",
              "action": "accountCreate"
            }'
  /failedLoginAttempt:
    post:
      summary: /failedLoginAttempt
      operationId: postFailedloginattempt
      description: >-
        Called by the auth server to signal to the customs server that a failed
        login attempt has occured.


        This information is stored by the customs server to enforce some of its
        policies.


        REQUEST BODY SCHEMA: `application/json`

        - `email`: the email address associated with the account

        - `ip`: the IP address where the request originates

        - `action`: (optional) the name of the action under consideration
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response: {}


            - `lockout` indicates whether or not the account should be locked
            out.
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: email and ip are both required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/failedLoginAttempt" \
            -d '{
              "email": "me@example.com",
              "ip": "192.0.2.1",
            }'
  /passwordReset:
    post:
      summary: /passwordReset
      operationId: postPasswordreset
      description: >-
        Called by the auth server to signal to the customs server that the
        password on the account has been successfully reset.


        The customs server uses this information to update its state (expiring
        bad logins for example).


        REQUEST BODY SCHEMA: `application/json`

        - `email`: the email address associated with the account
      responses:
        '200':
          description: >-
            Successful requests will produce a "200 OK" response with an empty
            JSON object as the body: {}
          schema:
            type: string
        '400':
          description: |-
            Failing requests may be caused by the following errors:
            - code MissingParameters: email is required
      x-codeSamples:
        - lang: JavaScript
          source: |-
            curl -v \
            -H "Content-Type: application/json" \
            "http://localhost:7000/passwordReset" \
            -d '{
              "email": "me@example.com",
            }'
definitions: {}
