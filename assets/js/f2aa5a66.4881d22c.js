"use strict";(self.webpackChunkfirefox_ecosystem_platform=self.webpackChunkfirefox_ecosystem_platform||[]).push([[7379],{28453:(e,s,t)=>{t.d(s,{R:()=>i,x:()=>d});var n=t(96540);const r={},o=n.createContext(r);function i(e){const s=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:s},e.children)}},78696:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"how-tos/node-debugging","title":"Node Debugging","description":"It\'s possible to debug a running Node process using a variety of debuggers (see the Node debugging docs for details).","source":"@site/docs/how-tos/node-debugging.md","sourceDirName":"how-tos","slug":"/how-tos/node-debugging","permalink":"/ecosystem-platform/how-tos/node-debugging","draft":false,"unlisted":false,"editUrl":"https://github.com/mozilla/ecosystem-platform/edit/master/docs/how-tos/node-debugging.md","tags":[],"version":"current","frontMatter":{"title":"Node Debugging"},"sidebar":"docs","previous":{"title":"Managing Yarn Dependencies","permalink":"/ecosystem-platform/how-tos/managing-yarn-dependencies"},"next":{"title":"Using a Custom Profile with Firefox","permalink":"/ecosystem-platform/how-tos/using-a-custom-profile-with-firefox"}}');var r=t(74848),o=t(28453);const i={title:"Node Debugging"},d=void 0,c={},l=[{value:"Debugging a Server",id:"debugging-a-server",level:2},{value:"Default Debug Ports",id:"default-debug-ports",level:3},{value:"Debugging Tests",id:"debugging-tests",level:2},{value:"Mocha tests (e.g. <code>fxa-shared</code>)",id:"mocha-tests-eg-fxa-shared",level:3},{value:"Jest tests (e.g. <code>fxa-payments-server</code>)",id:"jest-tests-eg-fxa-payments-server",level:3}];function a(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.p,{children:["It's possible to debug a running Node process using a variety of debuggers (see the ",(0,r.jsx)(s.a,{href:"https://nodejs.org/en/docs/guides/debugging-getting-started/",children:"Node debugging docs"})," for details)."]}),"\n",(0,r.jsxs)(s.p,{children:["You may also be interested in checking out how to use ",(0,r.jsx)(s.a,{href:"using-vscode-with-fxa",children:"VS Code with FxA"}),"."]}),"\n",(0,r.jsx)(s.h2,{id:"debugging-a-server",children:"Debugging a Server"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.code,{children:"yarn start"})," runs some of the services with the debugger enabled by default."]}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["Start the whole server as usual (",(0,r.jsx)(s.code,{children:"yarn && yarn start"})," from top-level in the monorepo)"]}),"\n",(0,r.jsxs)(s.li,{children:["To see which debug port each service is listening on check ",(0,r.jsx)(s.code,{children:".vscode/launch.json"})," or the ",(0,r.jsx)(s.code,{children:"pm2.config.js"})," file of the package you're interested in."]}),"\n",(0,r.jsxs)(s.li,{children:["Connect to the process to debug it:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Using Google Chrome, go to ",(0,r.jsx)(s.code,{children:"chrome://inspect"}),", then click the process to connect to DevTools.","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:'You may need to add a new target in the "Configure..." menu with the correct debug port'}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["VS Code requires setting up a ",(0,r.jsx)(s.code,{children:".vscode/launch.json"})," file - see the ",(0,r.jsx)(s.a,{href:"https://code.visualstudio.com/docs/nodejs/nodejs-debugging",children:"VS Code"})," docs for details."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"default-debug-ports",children:"Default Debug Ports"}),"\n",(0,r.jsxs)(s.p,{children:["If you're using ",(0,r.jsx)(s.code,{children:"yarn start"}),", the following ports are used for ",(0,r.jsx)(s.code,{children:"--inspect"}),":"]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Port"}),(0,r.jsx)(s.th,{children:"Service"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9130"}),(0,r.jsx)(s.td,{children:"content-server"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9140"}),(0,r.jsx)(s.td,{children:"admin-panel"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9150"}),(0,r.jsx)(s.td,{children:"admin-server"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9160"}),(0,r.jsx)(s.td,{children:"auth-server"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9170"}),(0,r.jsx)(s.td,{children:"payments-server"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9180"}),(0,r.jsx)(s.td,{children:"event-broker"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9190"}),(0,r.jsx)(s.td,{children:"support-panel"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"9200"}),(0,r.jsx)(s.td,{children:"graphql-api"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"debugging-tests",children:"Debugging Tests"}),"\n",(0,r.jsx)(s.p,{children:"The Node debugger can also be attached to a running test process. Mozilla accounts uses a variety of test frameworks, so the steps vary by package."}),"\n",(0,r.jsx)(s.admonition,{type:"tip",children:(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"--inspect"})," argument is used in the examples below, but ",(0,r.jsx)(s.code,{children:"--inspect-brk"})," can also be used to pause the process as soon as it starts."]})}),"\n",(0,r.jsxs)(s.h3,{id:"mocha-tests-eg-fxa-shared",children:["Mocha tests (e.g. ",(0,r.jsx)(s.code,{children:"fxa-shared"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["For Mocha, pass the ",(0,r.jsx)(s.code,{children:"--timeout 0"})," option, otherwise the test will fail if you step through it and exceed the default timeout (currently 2 seconds on ",(0,r.jsx)(s.code,{children:"fxa-shared"}),"):"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"node --inspect ./node_modules/.bin/mocha --timeout 0 path/to/file\n"})}),"\n",(0,r.jsxs)(s.p,{children:["In ",(0,r.jsx)(s.code,{children:"fxa-shared"}),", this incantation works for some directories, but not yet others."]}),"\n",(0,r.jsxs)(s.h3,{id:"jest-tests-eg-fxa-payments-server",children:["Jest tests (e.g. ",(0,r.jsx)(s.code,{children:"fxa-payments-server"}),")"]}),"\n",(0,r.jsxs)(s.p,{children:["For Jest, pass the ",(0,r.jsx)(s.code,{children:"--runInBand"})," argument so it doesn't fork off the test runner to a separate process that isn't available to the inspector:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-shell",children:"node --inspect ./node_modules/.bin/jest --runInBand --config server/jest.config.js filematcher\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Where ",(0,r.jsx)(s.code,{children:"filematcher"})," is a regex that matches against test file paths. If you omit ",(0,r.jsx)(s.code,{children:"filematcher"}),", Jest will run all tests (but you have to hit Enter a second time to trigger the test run)."]})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}}}]);